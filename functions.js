'use strict';
import dotenv from 'dotenv';
import Extra from 'telegraf/extra.js';
import fs from 'fs';
import path from 'path';
import * as dq from './database-queries.js';
import * as game from './game.js';
import * as app from './app.js';
import { readdirAsync, statAsync, unlinkAsync } from './helpers.js';
dotenv.config();

//–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
export async function checkBotAdmin(ChatID) {
    let status = false;
    const data = await app.bot.telegram.getChatAdministrators(ChatID);
    for (const item of data) {
        if (item.user.id == process.env.BOT_ID && item.can_delete_messages) {
            status = true;
            break;
        }
    }
    return status;
}

//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
export async function checkStartGame(ChatID) {
    let check = true;
    const data = await dq.getDataDeleteMessageRegistration(ChatID);
    if (data === null || data.messageID === 0) {
        check = false;
    }
    return check;
}

//–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏–≥—Ä—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —á–∞—Ç–µ
export async function registrationUserInGame(ctx, chatID) {
    const users = await dq.getDataRegistrationUserInGame(chatID);
    if (users === null) {
        ctx.reply('–ß–∞—Ç –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ', Extra.inReplyTo(ctx.message.message_id));
    } else {
        if (checkUserInBD(users.listOfUser, ctx.message.from.id)) {
            await dq.updateNameUser(
                chatID,
                ctx.message.from.id,
                fillingUserName(ctx.message.from),
                ctx.message.from.username
            );
        } else {
            await dq.updateDataAddUserInChatBD(
                chatID,
                ctx.message.from.id,
                fillingUserName(ctx.message.from),
                ctx.message.from.username
            );
        }
        if (users.dataGame.counterDays === 0) {
            if (users.players.length > 30) {
                ctx.reply('–í—ã –æ–ø–æ–∑–¥–∞–ª–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —è —É–∂–µ –Ω–∞–±—Ä–∞–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!');
            } else {
                if (checkUserInBD(users.players, ctx.message.from.id)) {
                    ctx.reply('–¢—ã —É–∂–µ –∏–≥—Ä–∞–µ—à—å –≤ ' + users.title, Extra.inReplyTo(ctx.message.message_id));
                } else {
                    await dq.updateDataRegistrationUserInGame(
                        chatID,
                        ctx.message.from.id,
                        fillingUserName(ctx.message.from),
                        ctx.message.from.username
                    );
                    ctx.reply('–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ –≤ ' + users.title, Extra.inReplyTo(ctx.message.message_id));
                    await game.updateMessageRegistration(chatID);
                }
            }
        } else {
            ctx.reply('–í—ã –æ–ø–æ–∑–¥–∞–ª–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!');
        }
    }
}

//–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç—É–ø–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –ë–î –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–≥–æ, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
export async function checkingLoggedUser(chatID, newChatMembers) {
    const users = await dq.getDataCheckingLoggedUser(chatID);
    if (users !== null) {
        for (const userChat of newChatMembers) {
            if (!userChat.is_bot) {
                let addTtriger = true;
                for (const user of users.listOfUser) {
                    if (user.userID === userChat.id) {
                        addTtriger = false;
                        break;
                    }
                }
                if (addTtriger) {
                    app.loggerGlobal.info(`–í —á–∞—Ç–µ id=${chatID} –¥–æ–±–∞–≤–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userChat.id}`);
                    await dq.updateDataAddUserInChatBD(
                        chatID,
                        userChat.id,
                        fillingUserName(userChat),
                        userChat.username
                    );
                    break;
                }
            }
        }
    }
}

//–£–¥–∞–ª—è–µ–º —é–∑–µ—Ä–∞ –∏–ª–∏ —á–∞—Ç –∏–∑ –±–∞–∑—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞
export async function leftUserOrChat(chatID, leftChatMember) {
    if (!leftChatMember.is_bot) {
        const users = await dq.getDataleftUserOrChat(chatID);
        if (users !== null) {
            for (const user of users.listOfUser) {
                if (user.userID === leftChatMember.id) {
                    app.loggerGlobal.info(`–í —á–∞—Ç–µ id=${chatID} —É–¥–∞–ª–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.userID}`);
                    await dq.updateDataLeftUserOrChat(chatID, leftChatMember.id);
                    break;
                }
            }
        }
    } else if (leftChatMember.id == process.env.BOT_ID) {
        app.loggerGlobal.info(`–í —á–∞—Ç–µ id=${chatID} —É–¥–∞–ª–∏–ª–∏ –±–æ—Ç–∞`);
        await dq.deleteDataLeftUserOrChat(chatID);
    }
}

//–í—ã–∑–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ
export async function callUsers(ctx) {
    if (checkTypeChat(ctx.message.chat.type)) {
        let usersName = '';
        const users = await dq.getDataCallUsers(ctx.message.chat.id);
        if (users !== null && users.listOfUser.length > 0) {
            users.listOfUser.forEach((item, i) => {
                usersName += `\n${i + 1}) <a href="tg://user?id=${item.userID}">${item.name}</a>`;
            });
            ctx.replyWithHTML('–ü—Ä–∏–∑—ã–≤–∞—é –≤ –∏–≥—Ä—É: ' + usersName);
        } else {
            ctx.reply('–Ø –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –∏–∑ –≤–∞—Å –Ω–µ –∑–Ω–∞—é, –ø–æ–∏–≥—Ä–∞–π—Ç–µ –∏ —Ç–æ–≥–¥–∞ –ø–æ–≥–æ–≤–æ—Ä–∏–ºüòâ');
        }
    } else {
        ctx.reply('–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!');
    }
}

//–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –≥—Ä—É–ø–ø—ã –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞
export function checkTypeChat(chatType) {
    if (chatType === 'group' || chatType === 'supergroup') {
        return true;
    } else {
        return false;
    }
}

//–í—ã—Ö–æ–¥ –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞
export function leaveChat(chatID) {
    app.bot.telegram.leaveChat(chatID);
}

//–î–µ–ª–∞–µ–º –∑–∞–ø–∏—Å—å —á–∞—Ç–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö
export async function updateOrAddChatInBD(chatID, title) {
    await dq.updateDataUpdateOrAddChatInBD(chatID, title);
}

//–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
export async function autoUpdateTitleChat(chatID, title) {
    await dq.updateDataAutoUpdateTitleChat(chatID, title);
}

//–û–±–Ω–æ–≤–ª—è–µ–º ID —á–∞—Ç–∞
export async function autoUpdateIDChat(chatID, newChatID) {
    await dq.updateDataAutoUpdateIDChat(chatID, newChatID);
}

//–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getInfoUser(chatID, userID) {
    const data = await dq.getDataUsers(chatID);
    if (data !== null) {
        for (const user of data.listOfUser) {
            if (user.userID === userID) {
                const textMessage =
                    `${user.name}, –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —á–∞—Ç–µ ${data.title}:\n` +
                    `- —Å—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: ${user.gameCounter};\n` +
                    `- –ø–æ–±–µ–¥: ${user.victories};\n` +
                    `- –ø–æ–±–µ–¥ –º–∏—Ä–Ω—ã–º –∂–∏—Ç–µ–ª–µ–º: ${user.worldVictories};\n` +
                    `- –ø–æ–±–µ–¥ –º–∞—Ñ–∏–µ–π: ${user.mafiaVictories};\n` +
                    `- –ø–æ–±–µ–¥ —Ç—Ä–∏–∞–¥–æ–π: ${user.triadaVictories};\n` +
                    `- –±–∞–ª–∞–Ω—Å: ${user.money} –º–æ–Ω–µ—Ç.`;
                await app.bot.telegram.sendMessage(chatID, textMessage);
                break;
            }
        }
    } else {
        await app.bot.telegram.sendMessage(chatID, '–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é, –ø–æ–∏–≥—Ä–∞–π—Ç–µ, –ø–æ—Ç–æ–º –∏ –ø–æ–≥–æ–≤–æ—Ä–∏–ºüòâ');
    }
}

//–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
export async function getInfoChat(chatID) {
    const data = await dq.getDataStatisticsGameInChat(chatID);
    if (data !== null) {
        const textMessage =
            `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ ${data.title}:\n` +
            `- –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –∏–≥—Ä: ${data.statisticsGameInChat.gameCounter};\n` +
            `- –ø–æ–±–µ–¥ –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π: ${data.statisticsGameInChat.peacefulVictories};\n` +
            `- –ø–æ–±–µ–¥ –º–∞—Ñ–∏–π: ${data.statisticsGameInChat.mafiaVictories};\n` +
            `- –ø–æ–±–µ–¥ —Ç—Ä–∏–∞–¥—ã: ${data.statisticsGameInChat.triadaVictories};\n` +
            `- –∑–Ω–∞—é ${data.statisticsGameInChat.knowUsers} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ;`;
        await app.bot.telegram.sendMessage(chatID, textMessage);
    } else {
        await app.bot.telegram.sendMessage(chatID, '–Ø –Ω–µ –∑–Ω–∞—é –≤–∞—à —á–∞—Ç, –ø–æ–∏–≥—Ä–∞–π—Ç–µ, –ø–æ—Ç–æ–º –∏ –ø–æ–≥–æ–≤–æ—Ä–∏–ºüòâ');
    }
}

//–¢–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
export async function topChat(chatID, text, field) {
    const data = await dq.getDataUsers(chatID);
    if (data !== null) {
        let textMessage = `–¢–æ–ø ${text} –≤ —á–∞—Ç–µ ${data.title}`;
        let users = data.listOfUser.filter(user => user[field] > 0);
        users.sort(byField(field));
        if (users.length > 0) {
            textMessage += ':';
            users.forEach((user, i) => {
                textMessage += `\n${i + 1}) ${user.name} - ${user[field]};`;
            });
        } else {
            textMessage += ` –Ω–µ –Ω–∞–π–¥–µ–Ω!`;
        }
        await app.bot.telegram.sendMessage(chatID, textMessage.substr(0, 3900));
    } else {
        await app.bot.telegram.sendMessage(chatID, '–Ø –Ω–µ –∑–Ω–∞—é –≤–∞—à —á–∞—Ç, –ø–æ–∏–≥—Ä–∞–π—Ç–µ, –ø–æ—Ç–æ–º –∏ –ø–æ–≥–æ–≤–æ—Ä–∏–ºüòâ');
    }
}

//–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –≤ –±–∞–∑—É
export async function writeMediaMongoBD() {
    if (fs.existsSync('./media')) {
        const fileNameArray = fs.readdirSync(`./media`);
        if (fileNameArray.length) {
            for (const item of fileNameArray) {
                const itemNameArray = item.split('.');
                itemNameArray.pop();
                const name = itemNameArray.join('.');
                const pathFile = path.resolve(`./media/${item}`);
                const buf = fs.readFileSync(pathFile);
                const dataMessage = await app.bot.telegram.sendAnimation(
                    process.env.CREATOR_ID,
                    { source: path.resolve(`./media/${item}`) },
                    { caption: `–°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∞–π–ª ${name} –≤ –±–¥` }
                );
                const fileId = dataMessage.animation.file_id;
                await dq.setMedia({ fileName: name, fileId: fileId, data: buf });
            }
        }
    } else {
        await app.bot.telegram.sendMessage(process.env.CREATOR_ID, `–ü–∞–ø–∫–∞ media –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞!`);
    }
}

//–ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
export async function completionOfActiveGames() {
    const chatIdArray = await dq.getChatIdActiveGame();
    if (chatIdArray.length) {
        for (const item of chatIdArray) {
            try {
                app.bot.telegram.deleteMessage(item.chatID, item.messageID);
            } finally {
                try {
                    app.bot.telegram.sendMessage(item.chatID, `–°–º–æ—Ç—Ä–∏—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–æ—Ä–æ–¥, –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã üòâ`);
                } finally {
                    dq.updateDataClearDataGame(item.chatID);
                }
            }
        }
    }
}

//–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∏–≥—Ä
export async function getLogsGame() {
    try {
        fs.existsSync(`./logs`) || fs.mkdirSync(`./logs`);
        const chatIdArray = await dq.getChatIdCompletedGame();
        if (chatIdArray.length) {
            let checkFile = true;
            const files = await readdirAsync('./logs/');
            for (const file of files) {
                if (
                    file !== 'bot.log' &&
                    file !== 'error.log' &&
                    chatIdArray.some(item => item.chatID == file.replace(/\d*game|.log/g, ''))
                ) {
                    const pathFile = path.resolve(`./logs/${file}`);
                    const stats = await statAsync(pathFile);
                    if (stats.size) {
                        checkFile = false;
                        app.bot.telegram.sendDocument(process.env.CREATOR_ID, { source: pathFile });
                    }
                    //await unlinkAsync(pathFile);
                }
            }
            if (checkFile) {
                app.bot.telegram.sendMessage(process.env.CREATOR_ID, `–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤!`);
            }
        } else {
            app.bot.telegram.sendMessage(process.env.CREATOR_ID, `–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤!`);
        }
    } catch (e) {
        app.loggerGlobal.error(e.stack);
        app.bot.telegram.sendMessage(process.env.CREATOR_ID, `–õ–æ–≥–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å`);
    }
}

//–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –±–æ—Ç–∞
export async function getLogsBot() {
    try {
        fs.existsSync(`./logs`) || fs.mkdirSync(`./logs`);
        const pathFiles = path.resolve(`./logs`);
        const statsBot = await statAsync(`${pathFiles}/bot.log`);
        const statsError = await statAsync(`${pathFiles}/error.log`);
        let checkLog = true;
        if (statsBot.size) {
            app.bot.telegram.sendDocument(process.env.CREATOR_ID, { source: `${pathFiles}/bot.log` });
            checkLog = false;
        }
        if (statsError.size) {
            app.bot.telegram.sendDocument(process.env.CREATOR_ID, { source: `${pathFiles}/error.log` });
            checkLog = false;
        }
        if (checkLog) {
            app.bot.telegram.sendMessage(process.env.CREATOR_ID, `–õ–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`);
        }
    } catch (e) {
        app.loggerGlobal.error(e.stack);
        app.bot.telegram.sendMessage(process.env.CREATOR_ID, `–õ–æ–≥–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å`);
    }
}

//–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
export function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min; //–ú–∞–∫—Å–∏–º—É–º –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è, –º–∏–Ω–∏–º—É–º –≤–∫–ª—é—á–∞–µ—Ç—Å—è
}

function byField(field) {
    return (a, b) => (a[field] < b[field] ? 1 : -1);
}

//–û–±—å–µ–¥–∏–Ω—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
function fillingUserName(from) {
    let nameUser = from.first_name;
    if (from.last_name !== undefined) {
        nameUser += ' ' + from.last_name;
    }
    return nameUser;
}

//–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–∞—Å—Å–∏–≤–µ
function checkUserInBD(array, checkUserId) {
    let checkAddUser = false;
    for (const user of array) {
        if (user.userID === checkUserId) {
            checkAddUser = true;
            break;
        }
    }
    return checkAddUser;
}

//–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ —Å —Ä–æ–ª—è–º–∏
export function mixingMas(arr) {
    let tmp, randindex;
    const length = arr.length;
    for (let j = 0; j < 3; j++) {
        for (let i = 0; i < length; i++) {
            randindex = getRandomInt(0, length);
            tmp = arr[i];
            arr[i] = arr[randindex];
            arr[randindex] = tmp;
        }
    }
    return arr;
}
